// src/components/Header.tsx
import React, { useState } from 'react';
import * as NavigationMenu from '@radix-ui/react-navigation-menu';
import { Menu, X } from 'lucide-react';
import { SiteConfig } from '@/types';
import { cn } from '@/utils/cn';

interface HeaderProps {
  config: SiteConfig;
  className?: string;
}

const cxUrl = (u?: string) =>
  u && u.includes('/upload/') ? u.replace('/upload/', '/upload/f_auto,q_auto,w_1280/') : u;

const Header: React.FC<HeaderProps> = ({ config, className = '' }) => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { hero, navigation = [], title, contact, logo } = config;

  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen);

  const renderHeroBanner = () => (
    <section
      className="relative hero-critical"
      style={{
        backgroundImage: hero?.backgroundImage
          ? `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url(${cxUrl(hero.backgroundImage)})`
          : 'linear-gradient(135deg, var(--color-primary) 0%, #1e40af 100%)',
      }}
      role="banner"
      aria-labelledby="hero-headline"
    >
      <div className="container">
        <div className="max-w-4xl text-center text-white animate-fade-in">
          <h1
            id="hero-headline"
            className="mb-6 text-5xl font-bold text-white md:text-6xl lg:text-7xl font-heading"
          >
            {hero?.headline}
          </h1>
          <p className="mb-4 font-medium text-responsive-lg opacity-90">{hero?.subheadline}</p>
          <p className="max-w-3xl mx-auto mb-8 leading-relaxed text-responsive-base">
            {hero?.description}
          </p>
          <div className="flex flex-col justify-center gap-4 sm:flex-row">
            {hero?.ctaButtons?.map((button, index) => (
              <a
                key={index}
                href={button.href}
                className={cn(
                  'btn text-lg px-8 py-4 font-semibold transition-all duration-200 transform hover:scale-105',
                  button.variant === 'primary' ? 'btn-primary shadow-lg' : 'btn-secondary shadow-lg'
                )}
                {...(button.external && {
                  target: '_blank',
                  rel: 'noopener noreferrer',
                })}
              >
                {button.text}
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
  );

  const renderHeroMinimal = () => (
    <section className="py-20 bg-gradient-to-r from-primary to-blue-600 lg:py-32">
      <div className="container text-center text-white">
        <h1 className="mb-6 font-bold text-responsive-2xl">{hero?.headline}</h1>
        <p className="max-w-2xl mx-auto mb-8 text-responsive-lg">{hero?.subheadline}</p>
        <div className="flex flex-col justify-center gap-4 sm:flex-row">
          {hero?.ctaButtons?.map((button, index) => (
            <a
              key={index}
              href={button.href}
              className={cn(
                'btn text-lg px-6 py-3 font-semibold',
                button.variant === 'primary' ? 'btn-primary' : 'btn-secondary'
              )}
              {...(button.external && {
                target: '_blank',
                rel: 'noopener noreferrer',
              })}
            >
              {button.text}
            </a>
          ))}
        </div>
      </div>
    </section>
  );

  const renderHeroSplit = () => (
    <section className="bg-white">
      <div className="container grid items-center gap-8 lg:grid-cols-2">
        <div
          className={cn(
            'py-16 lg:py-24',
            hero?.variant === 'split-left' ? 'order-2 lg:order-1' : 'order-1'
          )}
        >
          <h1 className="mb-6 font-bold text-responsive-xl">{hero?.headline}</h1>

          {logo && (
            <img
              src={logo}
              alt={`${title} Logo`}
              width={160}
              height={40}
              className="w-auto h-10"
              decoding="async"
              onError={(e) => {
                (e.currentTarget as HTMLImageElement).style.display = 'none';
              }}
            />
          )}

          <p className="mb-8 leading-relaxed text-responsive-base">{hero?.subheadline}</p>
          <div className="space-y-4">
            {hero?.ctaButtons?.map((button, index) => (
              <a
                key={index}
                href={button.href}
                className={cn(
                  'btn w-full justify-center text-lg px-6 py-3 font-semibold',
                  hero?.variant === 'split-left' ? 'btn-secondary' : 'btn-primary'
                )}
                {...(button.external && {
                  target: '_blank',
                  rel: 'noopener noreferrer',
                })}
              >
                {button.text}
              </a>
            ))}
          </div>
        </div>

        <div
          className={cn(
            'bg-cover bg-center min-h-[400px] lg:min-h-full rounded',
            hero?.variant === 'split-left' ? 'order-1 lg:order-2' : 'order-2'
          )}
          style={{
            backgroundImage: hero?.backgroundImage
              ? `url(${cxUrl(hero.backgroundImage)})`
              : 'linear-gradient(45deg, #f3f4f6, #e5e7eb)',
          }}
        />
      </div>
    </section>
  );

  return (
    <header className={className}>
      <a href="#main-content" className="skip-link">
        Skip to main content
      </a>

      {/* Navigation */}
      <nav
        className="relative z-50 text-white shadow-lg bg-primary"
        role="navigation"
        aria-label="Main Navigation"
      >
        <div className="container flex items-center justify-between py-4 relative">
          {/* Center: Logo */}
          <div className="absolute left-1/2 transform -translate-x-1/2">
            <a href="/" aria-label={`${title} home`}>
              <img
                src={
                  logo ||
                  'https://res.cloudinary.com/dsxpcwjwb/image/upload/v1760156354/logo-badgrBLK_wcgwaf.svg'
                }
                alt="Logo"
                className="h-12 w-auto"
                style={{ transform: 'scale(1.08)', transformOrigin: 'center' }}
              />
            </a>
          </div>

          {/* Right: Desktop Navigation */}
          <div className="hidden md:flex items-center gap-4">
            <ul className="flex items-center gap-2">
              {(navigation.length
                ? navigation
                : [
                    { label: 'Home', href: '/' },
                    { label: 'Services', href: '/#services' },
                    { label: 'About', href: '/about' },
                    { label: 'Contact', href: '/#contact' },
                  ]
              ).map((item) => (
                <li key={item.label}>
                  <a
                    href={item.href}
                    className="px-4 py-2 text-sm font-heading font-normal text-white transition-colors rounded-md hover:bg-blue-700/70"
                  >
                    {item.label}
                  </a>
                </li>
              ))}
            </ul>

            {/* CTA button on right */}
            <div>
              <a
                href={contact?.ctaHref || '/contact'}
                className="ml-4 btn btn-primary px-4 py-2 font-semibold"
                aria-label="Get Started"
              >
                {contact?.ctaText || 'Get Started'}
              </a>
            </div>
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={toggleMobileMenu}
            className="p-2 transition-colors rounded-md md:hidden hover:bg-blue-700"
            aria-label="Toggle menu"
            aria-expanded={isMobileMenuOpen}
          >
            {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>

        {/* Mobile Navigation */}
        {isMobileMenuOpen && (
          <div className="py-4 border-t border-blue-600 md:hidden">
            <ul className="flex flex-col gap-2 px-4">
              {(navigation.length
                ? navigation
                : [
                    { label: 'Home', href: '/' },
                    { label: 'Services', href: '/#services' },
                    { label: 'About', href: '/about' },
                    { label: 'Contact', href: '/#contact' },
                  ]
              ).map((item) => (
                <li key={item.label}>
                  <a
                    href={item.href}
                    className="block px-3 py-2 transition-colors rounded hover:bg-blue-700/70 text-white"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {item.label}
                  </a>
                </li>
              ))}

              <li>
                <a
                  href={contact?.ctaHref || '/contact'}
                  className="block px-3 py-2 mt-2 font-semibold rounded btn btn-primary text-center"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {contact?.ctaText || 'Get Started'}
                </a>
              </li>
            </ul>
          </div>
        )}
      </nav>

      {/* Hero Section */}
      {hero?.variant === 'banner' && renderHeroBanner()}
      {hero?.variant === 'hero' && renderHeroMinimal()}
      {hero?.variant === 'minimal' && renderHeroMinimal()}
      {(hero?.variant === 'split-left' || hero?.variant === 'split-right') && renderHeroSplit()}
    </header>
  );
};

export default Header;
