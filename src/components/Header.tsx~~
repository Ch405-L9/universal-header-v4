import React, { useState } from 'react';
import * as NavigationMenu from '@radix-ui/react-navigation-menu';
import { Menu, X } from 'lucide-react';
import { SiteConfig } from '@/types';
import { cn } from '@/utils/cn';

interface HeaderProps {
  config: SiteConfig;
  className?: string;
}

/** Cloudinary optimizer for inline backgrounds */
const cxUrl = (u?: string, w = 1280) =>
  u && u.includes('/upload/') ? u.replace('/upload/', `/upload/f_auto,q_auto,w_${w}/`) : u ?? '';

const Header: React.FC<HeaderProps> = ({ config, className = '' }) => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { hero, navigation, title, tagline, contact } = config;

  const toggleMobileMenu = () => setIsMobileMenuOpen(!isMobileMenuOpen);

  const renderHeroBanner = () => (
    <section
      className="hero-critical relative"
      style={{
        backgroundImage: hero.backgroundImage
          ? `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url(${cxUrl(hero.backgroundImage)})`
          : 'linear-gradient(135deg, var(--color-primary) 0%, #1e40af 100%)',
      }}
      role="banner"
      aria-labelledby="hero-headline"
    >
      <div className="container">
        <div className="max-w-4xl text-center text-white animate-fade-in">
          <h1 id="hero-headline" className="text-5xl md:text-6xl lg:text-7xl font-heading font-bold mb-6 text-white">
            {hero.headline}
          </h1>
          <p className="text-responsive-lg mb-4 opacity-90 font-medium">{hero.subheadline}</p>
          <p className="text-responsive-base mb-8 max-w-3xl mx-auto leading-relaxed">{hero.description}</p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            {hero.ctaButtons.map((button, index) => (
              <a
                key={index}
                href={button.href}
                className={cn(
                  'btn text-lg px-8 py-4 font-semibold transition-all duration-200 transform hover:scale-105',
                  button.variant === 'primary' ? 'btn-primary shadow-lg' : 'btn-secondary shadow-lg'
                )}
                {...(button.external && { target: '_blank', rel: 'noopener noreferrer' })}
              >
                {button.text}
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
  );

  const renderHeroMinimal = () => (
    <section className="bg-gradient-to-r from-primary to-blue-600 py-20 lg:py-32">
      <div className="container text-center text-white">
        <h1 className="text-responsive-2xl font-bold mb-6">{hero.headline}</h1>
        <p className="text-responsive-lg mb-8 max-w-2xl mx-auto">{hero.subheadline}</p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          {hero.ctaButtons.map((button, index) => (
            <a
              key={index}
              href={button.href}
              className={cn('btn', button.variant === 'primary' ? 'btn-primary' : 'btn-secondary')}
            >
              {button.text}
            </a>
          ))}
        </div>
      </div>
    </section>
  );

  const renderHeroSplit = () => (
    <section className="bg-white">
      <div className="container grid lg:grid-cols-2 gap-8 items-center">
        <div className={cn('py-16 lg:py-24', hero.variant === 'split-left' ? 'order-2 lg:order-1' : 'order-1')}>
          <h1 className="text-responsive-xl font-bold mb-6">{hero.headline}</h1>

          {config.logo && (
            <img
              src={config.logo}
              alt={`${title} Logo`}
              width={160}
              height={40}
              className="h-10 w-auto"
              decoding="async"
              onError={(e) => {
                (e.currentTarget as HTMLImageElement).style.display = 'none';
              }}
            />
          )}

          <p className="text-responsive-base mb-8 leading-relaxed">{hero.subheadline}</p>
          <div className="space-y-4">
            {hero.ctaButtons.map((button, index) => (
              <a
                key={index}
                href={button.href}
                className={cn(
                  'btn w-full justify-center',
                  hero.variant === 'split-left' ? 'btn-secondary' : 'btn-primary'
                )}
              >
                {button.text}
              </a>
            ))}
          </div>
        </div>

        <div
          className={cn(
            'bg-cover bg-center min-h-[400px] lg:min-h-full',
            hero.variant === 'split-left' ? 'order-1 lg:order-2' : 'order-2'
          )}
          style={{
            backgroundImage: hero.backgroundImage
              ? `url(${cxUrl(hero.backgroundImage)})`
              : 'linear-gradient(45deg, #f3f4f6, #e5e7eb)',
          }}
        />
      </div>
    </section>
  );

  return (
    <header className={className}>
      <a href="#main-content" className="skip-link">Skip to main content</a>

      {/* Navigation */}
      <nav className="bg-primary text-white shadow-lg relative z-50" role="navigation">
        <div className="container flex items-center justify-between py-4">
          <div className="flex items-center gap-3">
            <a href="/" className="flex items-center gap-2">
              <span className="text-xl font-bold tracking-tight">{title}</span>
            </a>
            {tagline && <span className="hidden md:block text-sm opacity-80 italic">{tagline}</span>}
          </div>

          <NavigationMenu.Root className="hidden md:flex">
            <NavigationMenu.List className="flex items-center gap-4">
              {navigation.map((item) => (
                <NavigationMenu.Item key={item.label}>
                  <NavigationMenu.Link
                    href={item.href}
                    className="px-4 py-2 rounded-md hover:bg-blue-700/70 transition-colors focus:outline-none focus:ring-2 focus:ring-white/50"
                    {...(item.external && { target: '_blank', rel: 'noopener noreferrer' })}
                  >
                    {item.label}
                  </NavigationMenu.Link>
                </NavigationMenu.Item>
              ))}
              {contact?.email && (
                <NavigationMenu.Item>
                  <a href={`mailto:${contact.email}`} className="btn btn-secondary ml-4">Contact Us</a>
                </NavigationMenu.Item>
              )}
            </NavigationMenu.List>
          </NavigationMenu.Root>

          <button
            onClick={toggleMobileMenu}
            className="md:hidden p-2 rounded-md hover:bg-blue-700 transition-colors"
            aria-label="Toggle navigation menu"
            aria-expanded={isMobileMenuOpen ? 'true' : 'false'}
            aria-controls="mobile-nav"
          >
            {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>

        {isMobileMenuOpen && (
          <div id="mobile-nav" className="md:hidden border-t border-blue-600 py-4 animate-slide-in">
            <ul className="flex flex-col gap-2 px-4">
              {navigation.map((item) => (
                <li key={item.label}>
                  <a
                    href={item.href}
                    className="block py-2 px-3 rounded hover:bg-blue-700/70 transition-colors"
                    onClick={() => setIsMobileMenuOpen(false)}
                    {...(item.external && { target: '_blank', rel: 'noopener noreferrer' })}
                  >
                    {item.label}
                  </a>
                </li>
              ))}
              {contact?.email && (
                <li className="pt-2">
                  <a
                    href={`mailto:${contact.email}`}
                    className="btn btn-secondary w-full justify-center"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    Contact Us
                  </a>
                </li>
              )}
            </ul>
          </div>
        )}
      </nav>

      {hero.variant === 'banner' && renderHeroBanner()}
      {(hero.variant === 'hero' || hero.variant === 'minimal') && renderHeroMinimal()}
      {(hero.variant === 'split-left' || hero.variant === 'split-right') && renderHeroSplit()}
    </header>
  );
};

export default Header;
