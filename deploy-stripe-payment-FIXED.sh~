#!/usr/bin/env bash
# deploy-stripe-payment-FIXED.sh - Complete Stripe Payment System
# Includes ALL fixes from debugging session
set -euo pipefail

log() { echo "[DEPLOY] $*"; }
success() { echo "[SUCCESS] $*"; }
fail() { echo "ERROR: $*" >&2; exit 1; }

[[ -f "package.json" ]] || fail "Not in project root"
[[ -d "src" ]] || fail "src/ directory not found"

log "Starting Stripe Payment System Deployment (with fixes)..."

# Create directory structure
log "Creating directory structure..."
mkdir -p src/{types,config,utils,hooks,components}
mkdir -p api/stripe
success "Directories created"

# Install dependencies
log "Installing Stripe dependencies..."
if command -v pnpm >/dev/null 2>&1; then
    pnpm add @stripe/stripe-js stripe
    pnpm add -D @types/node
elif command -v yarn >/dev/null 2>&1; then
    yarn add @stripe/stripe-js stripe
    yarn add -D @types/node
else
    npm install @stripe/stripe-js stripe
    npm install -D @types/node
fi
success "Dependencies installed"

# CREATE .ENV FILE (CORRECTED)
log "Creating .env file..."
cat > .env << 'ENV_EOF'
# ---------- Proton Mail Bridge (SMTP) ----------
EMAIL_PROVIDER=proton-bridge
EMAIL_HOST=127.0.0.1
EMAIL_PORT=1025
EMAIL_SECURE=false
EMAIL_USER=adgrant1@badgrtech.com
EMAIL_PASSWORD=W55--9Q2Ov_ZPswET9vCHw
EMAIL_FROM=noreply@badgrtech.com
EMAIL_PORT_SERVER=8787

# ---------- Stripe ----------
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_51S2otRPOrdJBR5y8NsfIoPFZNH8MYKml8nuMOGzsoCdvn7dSCDa79UlK4v6JgawfxqqO2wYG0B53dziDBH8UOfYD00uOOGY8F5
STRIPE_SECRET_KEY=sk_test_51S2otRPOrdJBR5y8yiZ1O4OPyYBuFY6whN0GpEzxUBgmjpBk5SH3XnIVa2Kuyb0razZfHV8iZDyn8R1Z26ATIMYi00863lgsdN
VITE_USE_STRIPE_MOCK=0

# ---------- App URL ----------
VITE_APP_URL=http://localhost:3000
VITE_PHONE_NUMBER=+14702236217
ENV_EOF

cp .env .env.local
success ".env and .env.local created"

# CREATE TYPE DEFINITIONS
log "Creating payment types..."
cat > src/types/payment.ts << 'TYPES_EOF'
export interface ServiceSelection {
  id: string;
  name: string;
  basePrice: number;
  category: string;
}

export interface IntakeFormData {
  businessName: string;
  websiteUrl?: string;
  yearsActive?: number;
  contactEmail: string;
  contactPhone: string;
  newBusiness: boolean;
  promoCode?: string;
  readyToSign: boolean;
  localMarketHigh: boolean;
}

export interface PricingCalculation {
  subtotal: number;
  discounts: DiscountBreakdown;
  total: number;
  deposit: number;
}

export interface DiscountBreakdown {
  marketAdjustment: number;
  contractSigner: number;
  newSba: number;
  bundleSavings: number;
  first25: number;
  total: number;
}

export interface PromoCodeValidation {
  valid: boolean;
  discountFactor?: number;
  message: string;
}

export interface CheckoutSessionData {
  services: ServiceSelection[];
  formData: IntakeFormData;
  pricing: PricingCalculation;
}
TYPES_EOF
success "Payment types created"

# CREATE PAYMENT CONFIG
log "Creating payment configuration..."
cat > src/config/payment.ts << 'PAYMENT_CONFIG_EOF'
export const PAYMENT_CONFIG = {
  depositPercentage: 0.50,
  
  discounts: {
    marketAdjustment: {
      belowGlobalAverage: 0.875,
      localAboveGlobal: 1.15,
    },
    contractSigner: 0.75,
    newSba: 0.80,
    bundleSavings: 0.90,
    first25: 0.75,
  },
  
  promoCodes: {
    newbuddy: {
      factor: 0.80,
      description: '20% off for new businesses',
      requiresNewBusiness: true,
    },
    santafe25: {
      factor: 0.75,
      description: '25% off - Santa Fe Club founding member',
      limitedQuantity: 25,
    },
  },
  
  services: {
    web: {
      landing: { name: 'Landing Page', basePrice: 1200 },
      basic: { name: 'Basic Site', basePrice: 2500 },
    },
    brand: {
      logo: { name: 'Logo Design', basePrice: 600 },
      rebrand: { name: 'Re-Branding', basePrice: 1800 },
    },
    content: {
      photoRetouching: { name: 'Photo Retouching', basePrice: 250 },
      videoEditing: { name: 'Video Editing', basePrice: 700 },
    },
  },
} as const;

export const STRIPE_CONFIG = {
  publicKey: import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '',
  successUrl: `${import.meta.env.VITE_APP_URL || 'http://localhost:3000'}/success`,
  cancelUrl: `${import.meta.env.VITE_APP_URL || 'http://localhost:3000'}/#services`,
};
PAYMENT_CONFIG_EOF
success "Payment configuration created"

# CREATE STRIPE UTILITIES
log "Creating Stripe utilities..."
cat > src/utils/stripe.ts << 'STRIPE_UTILS_EOF'
import { loadStripe, Stripe } from '@stripe/stripe-js';
import { STRIPE_CONFIG } from '@/config/payment';

let stripePromise: Promise<Stripe | null>;

export const getStripe = () => {
  if (!stripePromise) {
    stripePromise = loadStripe(STRIPE_CONFIG.publicKey);
  }
  return stripePromise;
};

export const createCheckoutSession = async (sessionData: {
  services: Array<{ id: string; name: string; basePrice: number }>;
  formData: Record<string, any>;
  pricing: { total: number; deposit: number };
}) => {
  const response = await fetch('/api/stripe/create-checkout-session', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(sessionData),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || 'Failed to create checkout session');
  }

  return response.json();
};
STRIPE_UTILS_EOF
success "Stripe utilities created"

# CREATE PRICING UTILITIES
log "Creating pricing calculator..."
cat > src/utils/pricing.ts << 'PRICING_UTILS_EOF'
import { PAYMENT_CONFIG } from '@/config/payment';
import { ServiceSelection, IntakeFormData, PricingCalculation } from '@/types/payment';

export const calculatePricing = (
  services: ServiceSelection[],
  formData: Partial<IntakeFormData>,
  promoCodeFactor?: number
): PricingCalculation => {
  const subtotal = services.reduce((sum, service) => sum + service.basePrice, 0);
  
  const discounts = {
    marketAdjustment: 0,
    contractSigner: 0,
    newSba: 0,
    bundleSavings: 0,
    first25: 0,
    total: 0,
  };

  let workingTotal = subtotal;

  if (formData.localMarketHigh) {
    const increase = subtotal * (PAYMENT_CONFIG.discounts.marketAdjustment.localAboveGlobal - 1);
    workingTotal += increase;
    discounts.marketAdjustment = increase;
  }

  if (formData.readyToSign) {
    const discount = workingTotal * (1 - PAYMENT_CONFIG.discounts.contractSigner);
    workingTotal -= discount;
    discounts.contractSigner = discount;
  }

  if (formData.newBusiness && promoCodeFactor) {
    const discount = workingTotal * (1 - promoCodeFactor);
    workingTotal -= discount;
    discounts.newSba = discount;
  }

  if (services.length > 1) {
    const discount = workingTotal * (1 - PAYMENT_CONFIG.discounts.bundleSavings);
    workingTotal -= discount;
    discounts.bundleSavings = discount;
  }

  discounts.total = subtotal - workingTotal + discounts.marketAdjustment;

  return {
    subtotal,
    discounts,
    total: Math.max(0, workingTotal),
    deposit: Math.max(0, workingTotal * PAYMENT_CONFIG.depositPercentage),
  };
};
PRICING_UTILS_EOF
success "Pricing calculator created"

# CREATE HOOKS
log "Creating React hooks..."

cat > src/hooks/usePromoCode.ts << 'PROMO_HOOK_EOF'
import { useState } from 'react';
import { PAYMENT_CONFIG } from '@/config/payment';
import { PromoCodeValidation } from '@/types/payment';

export const usePromoCode = (newBusiness: boolean) => {
  const [validation, setValidation] = useState<PromoCodeValidation>({
    valid: false,
    message: '',
  });

  const validatePromoCode = (code: string): PromoCodeValidation => {
    const normalizedCode = code.toLowerCase().trim();
    const promoConfig = PAYMENT_CONFIG.promoCodes[normalizedCode as keyof typeof PAYMENT_CONFIG.promoCodes];

    if (!promoConfig) {
      const result = { valid: false, message: 'Invalid promo code' };
      setValidation(result);
      return result;
    }

    if (promoConfig.requiresNewBusiness && !newBusiness) {
      const result = { valid: false, message: 'This promo code is only for new businesses (<1 year)' };
      setValidation(result);
      return result;
    }

    const result = {
      valid: true,
      discountFactor: promoConfig.factor,
      message: promoConfig.description,
    };
    setValidation(result);
    return result;
  };

  return { validation, validatePromoCode };
};
PROMO_HOOK_EOF

cat > src/hooks/usePaymentCalculator.ts << 'CALC_HOOK_EOF'
import { useState, useEffect } from 'react';
import { ServiceSelection, IntakeFormData, PricingCalculation } from '@/types/payment';
import { calculatePricing } from '@/utils/pricing';

export const usePaymentCalculator = (
  services: ServiceSelection[],
  formData: Partial<IntakeFormData>,
  promoCodeFactor?: number
) => {
  const [pricing, setPricing] = useState<PricingCalculation>({
    subtotal: 0,
    discounts: { marketAdjustment: 0, contractSigner: 0, newSba: 0, bundleSavings: 0, first25: 0, total: 0 },
    total: 0,
    deposit: 0,
  });

  useEffect(() => {
    if (services.length > 0) {
      const calculated = calculatePricing(services, formData, promoCodeFactor);
      setPricing(calculated);
    }
  }, [services, formData, promoCodeFactor]);

  return pricing;
};
CALC_HOOK_EOF
success "React hooks created"

# CREATE COMPONENTS
log "Creating React components..."

cat > src/components/IntakeForm.tsx << 'INTAKE_EOF'
import React, { useState } from 'react';
import { cn } from '@/utils/cn';
import { IntakeFormData } from '@/types/payment';
import { usePromoCode } from '@/hooks/usePromoCode';

interface IntakeFormProps {
  onSubmit: (data: IntakeFormData, promoFactor?: number) => void;
  className?: string;
}

const IntakeForm: React.FC<IntakeFormProps> = ({ onSubmit, className }) => {
  const [formData, setFormData] = useState<IntakeFormData>({
    businessName: '',
    contactEmail: '',
    contactPhone: '',
    newBusiness: false,
    readyToSign: false,
    localMarketHigh: false,
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const { validation, validatePromoCode } = usePromoCode(formData.newBusiness);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handlePromoBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const code = e.target.value.trim();
    if (code) {
      validatePromoCode(code);
    }
  };

  const validate = (): boolean => {
    const newErrors: Record<string, string> = {};
    if (!formData.businessName.trim()) newErrors.businessName = 'Business name required';
    if (!formData.contactEmail.trim()) newErrors.contactEmail = 'Email required';
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.contactEmail)) newErrors.contactEmail = 'Invalid email';
    if (!formData.contactPhone.trim()) newErrors.contactPhone = 'Phone required';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validate()) {
      onSubmit(formData, validation.valid ? validation.discountFactor : undefined);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={cn('space-y-6 bg-white p-8 rounded-sm border-2 border-blue-600', className)}>
      <h3 className="text-2xl font-bold text-gray-900 mb-6">Project Information</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-semibold mb-2">Business Name *</label>
          <input
            type="text"
            name="businessName"
            value={formData.businessName}
            onChange={handleChange}
            className={cn('w-full px-4 py-3 border-2 rounded-sm', errors.businessName ? 'border-red-500' : 'border-gray-300')}
          />
          {errors.businessName && <p className="text-red-600 text-sm mt-1">{errors.businessName}</p>}
        </div>

        <div>
          <label className="block text-sm font-semibold mb-2">Website URL</label>
          <input
            type="url"
            name="websiteUrl"
            value={formData.websiteUrl || ''}
            onChange={handleChange}
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-semibold mb-2">Email *</label>
          <input
            type="email"
            name="contactEmail"
            value={formData.contactEmail}
            onChange={handleChange}
            className={cn('w-full px-4 py-3 border-2 rounded-sm', errors.contactEmail ? 'border-red-500' : 'border-gray-300')}
          />
          {errors.contactEmail && <p className="text-red-600 text-sm mt-1">{errors.contactEmail}</p>}
        </div>

        <div>
          <label className="block text-sm font-semibold mb-2">Phone *</label>
          <input
            type="tel"
            name="contactPhone"
            value={formData.contactPhone}
            onChange={handleChange}
            className={cn('w-full px-4 py-3 border-2 rounded-sm', errors.contactPhone ? 'border-red-500' : 'border-gray-300')}
          />
          {errors.contactPhone && <p className="text-red-600 text-sm mt-1">{errors.contactPhone}</p>}
        </div>

        <div>
          <label className="block text-sm font-semibold mb-2">Years in Business</label>
          <input
            type="number"
            name="yearsActive"
            value={formData.yearsActive || ''}
            onChange={handleChange}
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-semibold mb-2">Promo Code</label>
          <input
            type="text"
            name="promoCode"
            value={formData.promoCode || ''}
            onChange={handleChange}
            onBlur={handlePromoBlur}
            className="w-full px-4 py-3 border-2 border-gray-300 rounded-sm"
          />
          {validation.message && (
            <p className={cn('text-sm mt-1', validation.valid ? 'text-green-600' : 'text-red-600')}>
              {validation.message}
            </p>
          )}
        </div>
      </div>

      <div className="space-y-4">
        <label className="flex items-center space-x-3">
          <input
            type="checkbox"
            name="newBusiness"
            checked={formData.newBusiness}
            onChange={handleChange}
            className="w-5 h-5"
          />
          <span className="text-sm font-medium">Business is less than 1 year old</span>
        </label>

        <label className="flex items-center space-x-3">
          <input
            type="checkbox"
            name="readyToSign"
            checked={formData.readyToSign}
            onChange={handleChange}
            className="w-5 h-5"
          />
          <span className="text-sm font-medium">Ready to sign contract today (25% discount)</span>
        </label>

        <label className="flex items-center space-x-3">
          <input
            type="checkbox"
            name="localMarketHigh"
            checked={formData.localMarketHigh}
            onChange={handleChange}
            className="w-5 h-5"
          />
          <span className="text-sm font-medium">Local market costs above global average</span>
        </label>
      </div>

      <button
        type="submit"
        className="w-full bg-blue-600 text-white font-semibold py-4 rounded-sm hover:bg-blue-700 transition-colors"
      >
        Continue to Payment
      </button>
    </form>
  );
};

export default IntakeForm;
INTAKE_EOF

cat > src/components/PaymentCalculator.tsx << 'CALCULATOR_EOF'
import React, { useState } from 'react';
import { cn } from '@/utils/cn';
import { ServiceSelection, IntakeFormData } from '@/types/payment';
import { usePaymentCalculator } from '@/hooks/usePaymentCalculator';
import { PAYMENT_CONFIG } from '@/config/payment';
import IntakeForm from './IntakeForm';
import CheckoutButton from './CheckoutButton';

interface PaymentCalculatorProps {
  className?: string;
}

const PaymentCalculator: React.FC<PaymentCalculatorProps> = ({ className }) => {
  const [selectedServices, setSelectedServices] = useState<ServiceSelection[]>([]);
  const [showIntake, setShowIntake] = useState(false);
  const [formData, setFormData] = useState<IntakeFormData | null>(null);
  const [promoFactor, setPromoFactor] = useState<number>();

  const pricing = usePaymentCalculator(selectedServices, formData || {}, promoFactor);

  const toggleService = (category: string, serviceKey: string, serviceName: string, basePrice: number) => {
    const serviceId = `${category}-${serviceKey}`;
    setSelectedServices(prev => {
      const exists = prev.find(s => s.id === serviceId);
      if (exists) {
        return prev.filter(s => s.id !== serviceId);
      }
      return [...prev, { id: serviceId, name: serviceName, basePrice, category }];
    });
  };

  const handleIntakeSubmit = (data: IntakeFormData, factor?: number) => {
    setFormData(data);
    setPromoFactor(factor);
  };

  return (
    <div className={cn('space-y-8', className)}>
      <div className="bg-white p-8 rounded-sm border-2 border-blue-600">
        <h3 className="text-2xl font-bold mb-6">Select Services</h3>
        
        {Object.entries(PAYMENT_CONFIG.services).map(([category, services]) => (
          <div key={category} className="mb-6">
            <h4 className="text-lg font-semibold mb-3 capitalize">{category}</h4>
            <div className="space-y-2">
              {Object.entries(services).map(([key, service]) => {
                const serviceId = `${category}-${key}`;
                const isSelected = selectedServices.some(s => s.id === serviceId);
                return (
                  <label key={key} className="flex items-center space-x-3 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={isSelected}
                      onChange={() => toggleService(category, key, service.name, service.basePrice)}
                      className="w-5 h-5"
                    />
                    <span className="flex-1">{service.name}</span>
                    <span className="font-semibold">${service.basePrice}</span>
                  </label>
                );
              })}
            </div>
          </div>
        ))}

        {selectedServices.length > 0 && (
          <div className="mt-6 pt-6 border-t-2">
            <div className="space-y-2 text-lg">
              <div className="flex justify-between">
                <span>Subtotal:</span>
                <span>${pricing.subtotal.toFixed(2)}</span>
              </div>
              {pricing.discounts.total > 0 && (
                <div className="flex justify-between text-green-600">
                  <span>Discounts:</span>
                  <span>-${pricing.discounts.total.toFixed(2)}</span>
                </div>
              )}
              <div className="flex justify-between font-bold text-xl pt-2 border-t">
                <span>Total:</span>
                <span>${pricing.total.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-blue-600 font-semibold">
                <span>50% Deposit:</span>
                <span>${pricing.deposit.toFixed(2)}</span>
              </div>
            </div>

            {!showIntake && (
              <button
                onClick={() => setShowIntake(true)}
                className="w-full mt-6 bg-blue-600 text-white font-semibold py-4 rounded-sm hover:bg-blue-700"
              >
                Continue
              </button>
            )}
          </div>
        )}
      </div>

      {showIntake && selectedServices.length > 0 && (
        <>
          <IntakeForm onSubmit={handleIntakeSubmit} />
          {formData && (
            <CheckoutButton
              services={selectedServices}
              formData={formData}
              pricing={pricing}
            />
          )}
        </>
      )}
    </div>
  );
};

export default PaymentCalculator;
CALCULATOR_EOF

cat > src/components/CheckoutButton.tsx << 'CHECKOUT_EOF'
import React, { useState } from 'react';
import { cn } from '@/utils/cn';
import { getStripe, createCheckoutSession } from '@/utils/stripe';
import { ServiceSelection, IntakeFormData, PricingCalculation } from '@/types/payment';

interface CheckoutButtonProps {
  services: ServiceSelection[];
  formData: IntakeFormData;
  pricing: PricingCalculation;
  className?: string;
}

const CheckoutButton: React.FC<CheckoutButtonProps> = ({
  services,
  formData,
  pricing,
  className,
}) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleCheckout = async () => {
    try {
      setLoading(true);
      setError(null);

      const stripe = await getStripe();
      if (!stripe) {
        throw new Error('Stripe failed to load');
      }

      const session = await createCheckoutSession({
        services,
        formData,
        pricing,
      });

      const result = await stripe.redirectToCheckout({
        sessionId: session.id,
      });

      if (result.error) {
        throw new Error(result.error.message);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Payment failed');
      setLoading(false);
    }
  };

  return (
    <div className={cn('bg-white p-8 rounded-sm border-2 border-blue-600', className)}>
      <h3 className="text-2xl font-bold mb-4">Ready to Start?</h3>
      <p className="text-gray-600 mb-6">
        Click below to securely pay your 50% deposit (${pricing.deposit.toFixed(2)}) and begin your project.
      </p>
      
      {error && (
        <div className="bg-red-50 border-2 border-red-500 text-red-700 p-4 rounded-sm mb-4">
          {error}
        </div>
      )}

      <button
        onClick={handleCheckout}
        disabled={loading}
        className={cn(
          'w-full bg-blue-600 text-white font-semibold py-4 rounded-sm transition-colors',
          loading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-700'
        )}
      >
        {loading ? 'Processing...' : `Pay Deposit - $${pricing.deposit.toFixed(2)}`}
      </button>
    </div>
  );
};

export default CheckoutButton;
CHECKOUT_EOF
success "React components created"

# UPDATE SERVICESECTION - FIXED
log "Updating ServicesSection.tsx..."
cat > src/components/ServicesSection.tsx << 'SERVICES_EOF'
import React, { useState } from 'react';
import ServiceCard from './ServiceCard';
import PaymentCalculator from './PaymentCalculator';
import { ServicesConfig } from '@/types/services';
import { cn } from '@/utils/cn';

interface ServicesSectionProps {
  config: ServicesConfig;
  className?: string;
}

const ServicesSection: React.FC<ServicesSectionProps> = ({ config, className = '' }) => {
  const [showCalculator, setShowCalculator] = useState(false);

  return (
    <section className={cn('py-20 bg-gray-50', className)} id="services">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 tracking-wide">
            {config.title}
          </h2>
          <p className="text-xl md:text-2xl text-blue-600 font-medium mb-6 tracking-wide">
            {config.subtitle}
          </p>
          <div className="max-w-4xl mx-auto">
            <p className="text-lg text-gray-600 leading-relaxed">
              {config.description}
            </p>
          </div>
        </div>

        {!showCalculator ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12 mb-16">
              {config.services.map((service) => (
                <ServiceCard 
                  key={service.id}
                  service={service}
                  className="transform hover:scale-105 transition-transform duration-300"
                />
              ))}
            </div>

            <div className="text-center mb-12">
              <button
                onClick={() => setShowCalculator(true)}
                className="bg-blue-600 text-white font-semibold py-4 px-12 rounded-sm hover:bg-blue-700 transition-colors text-lg"
              >
                Get Custom Quote
              </button>
            </div>
          </>
        ) : (
          <div className="max-w-4xl mx-auto">
            <button
              onClick={() => setShowCalculator(false)}
              className="mb-6 text-blue-600 hover:text-blue-700 font-semibold"
            >
              ← Back to Services
            </button>
            <PaymentCalculator />
          </div>
        )}

        {!showCalculator && config.ctaSection && (
          <div className="text-center bg-white rounded-sm border-2 border-blue-600 p-12">
            <h3 className="text-3xl font-bold text-gray-900 mb-6">
              {config.ctaSection.title}
            </h3>
            <p className="text-lg text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed">
              {config.ctaSection.description}
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <a
                href={config.ctaSection.primaryCta.href}
                className={cn(
                  'bg-blue-600 text-white font-semibold py-4 px-8 rounded-sm',
                  'hover:bg-blue-700 transition-colors duration-200 text-lg',
                  'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'
                )}
              >
                {config.ctaSection.primaryCta.text}
              </a>
              {config.ctaSection.secondaryCta && (
                <a
                  href={config.ctaSection.secondaryCta.href}
                  className={cn(
                    'bg-white text-blue-600 font-semibold py-4 px-8 rounded-sm border-2 border-blue-600',
                    'hover:bg-blue-50 transition-colors duration-200 text-lg',
                    'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'
                  )}
                >
                  {config.ctaSection.secondaryCta.text}
                </a>
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default ServicesSection;
SERVICES_EOF
success "ServicesSection.tsx updated"

# UPDATE SERVICECARD - FIXED
log "Updating ServiceCard.tsx with fix..."
cat > src/components/ServiceCard.tsx << 'SERVICECARD_FIX'
import React from 'react';
import { Service } from '@/types/services';
import { cn } from '@/utils/cn';

interface ServiceCardProps {
  service: Service;
  className?: string;
}

const PLACEHOLDER_400x300 =
  'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="300"><rect width="100%" height="100%" fill="%23e5e7eb"/></svg>';

const cxW = (u: string, w: number) =>
  u.includes('/upload/') ? u.replace('/upload/', `/upload/f_auto,q_auto,w_${w}/`) : u;

const ServiceCard: React.FC<ServiceCardProps> = ({ service, className = '' }) => {
  const handleCtaClick = () => {
    switch (service.cta.type) {
      case 'email':
        window.location.href = `mailto:${service.cta.href}?subject=Inquiry about ${service.title}`;
        break;
      case 'phone':
        window.location.href = `tel:${service.cta.href}`;
        break;
      case 'link':
        window.open(service.cta.href, '_blank', 'noopener noreferrer');
        break;
      default:
        window.location.href = service.cta.href;
    }
  };

  const img = service.image;

  return (
    <div
      className={cn(
        'bg-white rounded-sm border-2 border-blue-600 p-8 hover:shadow-lg transition-all duration-300',
        'hover:-translate-y-2 hover:shadow-blue-200 group relative',
        service.popular && 'ring-2 ring-blue-600 ring-offset-4',
        className
      )}
    >
      {service.popular && (
        <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
          <span className="bg-blue-600 text-white px-4 py-1 text-sm font-semibold rounded-sm">Most Popular</span>
        </div>
      )}

      <img
        loading="lazy"
        decoding="async"
        width={400}
        height={300}
        src={img ? cxW(img, 400) : PLACEHOLDER_400x300}
        {...(img
          ? {
              srcSet: `${cxW(img, 400)} 400w, ${cxW(img, 800)} 800w`,
              sizes: '(max-width: 400px) 100vw, 400px',
            }
          : {})}
        alt={service.title ?? 'Service'}
        className="rounded-lg shadow-md object-cover w-full h-auto mb-6"
        onError={(e) => {
          (e.currentTarget as HTMLImageElement).src = PLACEHOLDER_400x300;
          (e.currentTarget as HTMLImageElement).removeAttribute('srcset');
        }}
      />

      <div className="text-center mb-6">
        <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-blue-600 transition-colors">
          {service.title}
        </h3>
        <p className="text-gray-600 text-lg leading-relaxed mb-6">{service.description}</p>

        <div className="text-center mb-6">
          <span className="text-3xl font-bold text-blue-600">
            {service.price?.currency || '$'}
            {(service.price?.starting || 0).toLocaleString()}
          </span>
          {service.price?.period && <span className="text-gray-500 text-lg">/{service.price.period}</span>}
          <p className="text-sm text-gray-500 mt-1">Starting price</p>
        </div>
      </div>

      <button
        onClick={handleCtaClick}
        className={cn(
          'w-full bg-blue-600 text-white font-semibold py-4 px-6 rounded-sm',
          'hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
          'transition-colors duration-200 text-lg'
        )}
      >
        {service.cta.text}
      </button>
    </div>
  );
};

export default ServiceCard;
SERVICECARD_FIX
success "ServiceCard.tsx updated with fix"

# UPDATE APP.TSX
log "Updating App.tsx..."
cat > src/App.tsx << 'APP_EOF'
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { defaultSiteConfig } from '@/config/site';
import { badgerTechAbout } from '@/config/about';
import { badgerTechContact } from '@/config/contact';
import { badgerTechFooter } from '@/config/footer';

const ServicesSection = lazy(() => import('@/components/ServicesSection'));
const AboutSection = lazy(() => import('@/components/AboutSection'));
const ContactSection = lazy(() => import('@/components/ContactSection'));

const LoadingFallback = () => (
  <div style={{ minHeight: '400px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    <div style={{ width: '40px', height: '40px', border: '4px solid #0066CC', borderTop: '4px solid transparent', borderRadius: '50%', animation: 'spin 1s linear infinite' }} />
  </div>
);

const HomePage = () => (
  <div className="App min-h-screen" id="top">
    <Header config={defaultSiteConfig} />
    <main id="main-content" role="main">
      <Suspense fallback={<LoadingFallback />}>
        {defaultSiteConfig.services && <ServicesSection config={defaultSiteConfig.services} />}
        <AboutSection config={badgerTechAbout} />
        <ContactSection config={badgerTechContact} />
      </Suspense>
    </main>
    <Footer config={badgerTechFooter} />
  </div>
);

const SuccessPage = () => (
  <div className="min-h-screen flex items-center justify-center bg-gray-50">
    <div className="max-w-md w-full bg-white p-8 rounded-sm border-2 border-green-600 text-center">
      <div className="text-green-600 text-6xl mb-4">✓</div>
      <h1 className="text-3xl font-bold text-gray-900 mb-4">Payment Successful!</h1>
      <p className="text-gray-600 mb-6">
        Thank you for your deposit. We'll reach out within 2 hours to begin your project.
      </p>
      <a href="/" className="bg-blue-600 text-white font-semibold py-3 px-6 rounded-sm hover:bg-blue-700 inline-block">
        Return Home
      </a>
    </div>
  </div>
);

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/success" element={<SuccessPage />} />
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Router>
  );
}

export default App;
APP_EOF
success "App.tsx updated"

# CREATE API ENDPOINTS
log "Creating API endpoints..."
cat > api/stripe/create-checkout-session.ts << 'API_SESSION_EOF'
import type { VercelRequest, VercelResponse } from '@vercel/node';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-12-18.acacia',
});

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { services, formData, pricing } = req.body;

    const lineItems = [
      {
        price_data: {
          currency: 'usd',
          product_data: {
            name: 'Project Deposit (50%)',
            description: services.map((s: any) => s.name).join(', '),
          },
          unit_amount: Math.round(pricing.deposit * 100),
        },
        quantity: 1,
      },
    ];

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: `${process.env.VITE_APP_URL || 'http://localhost:3000'}/success`,
      cancel_url: `${process.env.VITE_APP_URL || 'http://localhost:3000'}/#services`,
      customer_email: formData.contactEmail,
      metadata: {
        businessName: formData.businessName,
        phone: formData.contactPhone,
        services: JSON.stringify(services.map((s: any) => s.name)),
        totalProject: pricing.total.toFixed(2),
      },
    });

    res.status(200).json({ id: session.id });
  } catch (error: any) {
    console.error('Stripe session creation error:', error);
    res.status(500).json({ message: error.message || 'Internal server error' });
  }
}
API_SESSION_EOF

cat > api/stripe/webhook.ts << 'API_WEBHOOK_EOF'
import type { VercelRequest, VercelResponse } from '@vercel/node';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-12-18.acacia',
});

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export const config = {
  api: {
    bodyParser: false,
  },
};

async function buffer(req: VercelRequest): Promise<Buffer> {
  const chunks: Buffer[] = [];
  for await (const chunk of req) {
    chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk);
  }
  return Buffer.concat(chunks);
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const buf = await buffer(req);
  const sig = req.headers['stripe-signature']!;

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(buf, sig, webhookSecret);
  } catch (err: any) {
    console.error('Webhook signature verification failed:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object as Stripe.Checkout.Session;
    
    console.log('Payment successful:', {
      customerEmail: session.customer_email,
      metadata: session.metadata,
    });
  }

  res.status(200).json({ received: true });
}
API_WEBHOOK_EOF
success "API endpoints created"

# VERIFICATION
log "Verifying deployment..."

REQUIRED_FILES=(
  "src/types/payment.ts"
  "src/config/payment.ts"
  "src/utils/stripe.ts"
  "src/utils/pricing.ts"
  "src/hooks/usePaymentCalculator.ts"
  "src/hooks/usePromoCode.ts"
  "src/components/PaymentCalculator.tsx"
  "src/components/IntakeForm.tsx"
  "src/components/CheckoutButton.tsx"
  "src/components/ServicesSection.tsx"
  "src/components/ServiceCard.tsx"
  "src/App.tsx"
  "api/stripe/create-checkout-session.ts"
  "api/stripe/webhook.ts"
  ".env"
  ".env.local"
)

MISSING=0
for file in "${REQUIRED_FILES[@]}"; do
  if [[ ! -f "$file" ]]; then
    echo "✗ Missing: $file"
    MISSING=$((MISSING + 1))
  fi
done

if [[ $MISSING -gt 0 ]]; then
  fail "$MISSING files missing"
fi

success "All files deployed successfully!"

echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  🎉 STRIPE PAYMENT SYSTEM DEPLOYED (WITH ALL FIXES)"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "✅ 16 files created (all fixes included)"
echo "✅ ServiceCard.tsx fix applied (no React object errors)"
echo "✅ .env file created with your keys"
echo "✅ Dependencies installed"
echo ""
echo "🚀 START THE SERVER:"
echo "   npm run dev"
echo ""
echo "📋 TEST THE FLOW:"
echo "   1. Navigate to http://localhost:3000"
echo "   2. Services → 'Get Custom Quote'"
echo "   3. Select services → Fill form"
echo "   4. Click 'Pay Deposit'"
echo "   5. Test card: 4242 4242 4242 4242"
echo ""
echo "════════════════════════════════════════════════════════════════"
success "Ready to test!"
